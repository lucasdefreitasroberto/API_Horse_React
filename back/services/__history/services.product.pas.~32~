unit services.product;

interface

uses
  System.SysUtils, System.Classes, uDMConexao, FireDAC.Stan.Intf,
  FireDAC.Stan.Option, FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf,
  FireDAC.Stan.Def, FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys,
  FireDAC.Phys.FB, FireDAC.Phys.FBDef, FireDAC.VCLUI.Wait, FireDAC.Phys.IBBase,
  Data.DB, FireDAC.Comp.Client, FireDAC.Stan.Param, FireDAC.DatS,
  FireDAC.DApt.Intf, FireDAC.DApt, FireDAC.Comp.DataSet, System.JSON,
  DataSet.Serialize;

type
  TServicesProduct = class(TDMConexao)
  public
    function ListAll: TFDQuery;
    function GetById(const ID: Int64): TFDQuery;
    function Insert(const AProduct: TJSONObject): TFDQuery;
  end;

var
  ServicesProduct: TServicesProduct;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

{$R *.dfm}

{ TServiceProduct }

function TServicesProduct.GetById(const ID: Int64): TFDQuery;
begin
  Result := FDQuery;
  FDQuery.SQL.Add('where id = :id');
  FDQuery.ParamByName('id').AsLargeInt := ID;
  FDQuery.Open();
end;

function TServicesProduct.Insert(const AProduct: TJSONObject): TFDQuery;
var
  ID: Int64;
  sqlGen: string;
begin
  sqlGen := 'select gen_id(GEN_PRODUCT_ID,1) from RDB$DATABASE';
  ID := StrToInt(DMConexao.ExecuteScalar(sqlGen));

  Result := FDQuery;
  FDQuery.SQL.Add('where 1 <> 1');
  FDQuery.Open();

  AProduct.AddPair('ID', ID.ToString);
  FDQuery.LoadFromJSON(AProduct, False);
end;

function TServicesProduct.ListAll: TFDQuery;
begin
  Result := FDQuery;
  FDQuery.SQL.Add('order by ID');
  FDQuery.Open();
end;

end.

